{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/Tina/Desktop/QuestGPS/front_end/Channel.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { Linking } from 'expo';\n\nvar Channel = function (_React$Component) {\n  _inherits(Channel, _React$Component);\n\n  var _super = _createSuper(Channel);\n\n  function Channel() {\n    var _this;\n\n    _classCallCheck(this, Channel);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      chatRooms: []\n    };\n\n    _this.newMessage = function (event) {\n      event.preventDefault();\n      fetch(\"http://localhost:3000/messages\", {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          content: event.target[0].value,\n          chat_room_id: event.target.dataset.chatRoomId\n        })\n      });\n      newMessageForm.reset();\n    };\n\n    return _this;\n  }\n\n  _createClass(Channel, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      fetch(Linking.makeUrl(\"http://localhost:3000/channels\")).then(function (resp) {\n        return resp.json();\n      }).then(function (chatRooms) {\n        return _this2.setState({\n          chatRooms: chatRooms\n        });\n      });\n    }\n  }, {\n    key: \"createChannelWebsocketConnection\",\n    value: function createChannelWebsocketConnection(channelId) {\n      socket = new WebSocket('ws://localhost:3000/cable');\n\n      socket.onopen = function (event) {\n        console.log('WebSocket is connected.');\n        var msg = {\n          command: 'subscribe',\n          identifier: JSON.stringify({\n            id: channelId,\n            channel: 'ChannelChannel'\n          })\n        };\n        socket.send(JSON.stringify(msg));\n      };\n\n      socket.onclose = function (event) {\n        console.log('WebSocket is closed.');\n      };\n\n      socket.onmessage = function (event) {\n        var response = event.data;\n        var msg = JSON.parse(response);\n\n        if (msg.type === \"ping\") {\n          return;\n        }\n\n        console.log(\"FROM RAILS: \", msg);\n\n        if (msg.message) {\n          renderMessage(msg.message);\n        }\n      };\n\n      socket.onerror = function (error) {\n        console.log('WebSocket Error: ' + error.message);\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      console.log(this.state);\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }\n      }, React.createElement(View, {\n        style: styles.roomContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 17\n        }\n      }, React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }\n      }, \"Start Chat\"), React.createElement(TextInput, {\n        style: styles.roomContainer,\n        placeholder: \"Room Name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }\n      }), React.createElement(Button, {\n        title: \"submit\",\n        onPress: function onPress() {\n          _this3.createChannelWebsocketConnection();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }\n      })), React.createElement(View, {\n        style: styles.roomContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 17\n        }\n      }, React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }\n      }, \"All Rooms\"), React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }\n      })), React.createElement(View, {\n        style: styles.roomContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 17\n        }\n      }, React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }\n      }, \"New Message\"), React.createElement(TextInput, {\n        style: styles.roomContainer,\n        placeholder: \"message...\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }\n      }), React.createElement(Button, {\n        title: \"submit\",\n        onPress: function onPress() {\n          _this3.newMessage();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }\n      })));\n    }\n  }]);\n\n  return Channel;\n}(React.Component);\n\nexport { Channel as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    paddingTop: 50\n  },\n  roomContainer: {\n    paddingBottom: 25,\n    textAlign: \"center\"\n  },\n  inputDiv: {\n    height: 20\n  }\n});","map":{"version":3,"sources":["/Users/Tina/Desktop/QuestGPS/front_end/Channel.js"],"names":["React","Linking","Channel","state","chatRooms","newMessage","event","preventDefault","fetch","method","headers","body","JSON","stringify","content","target","value","chat_room_id","dataset","chatRoomId","newMessageForm","reset","makeUrl","then","resp","json","setState","channelId","socket","WebSocket","onopen","console","log","msg","command","identifier","id","channel","send","onclose","onmessage","response","data","parse","type","message","renderMessage","onerror","error","styles","container","roomContainer","createChannelWebsocketConnection","Component","StyleSheet","create","flex","backgroundColor","alignItems","paddingTop","paddingBottom","textAlign","inputDiv","height"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { StyleSheet, Text, View, Button, TextInput } from 'react-native';\nimport { Linking } from 'expo';\n\nexport default class Channel extends React.Component{\n\n    state = {\n        chatRooms: []\n    }\n\n    componentDidMount(){\n        fetch(Linking.makeUrl(\"http://localhost:3000/channels\"))\n            .then(resp => resp.json())\n            .then(chatRooms => this.setState({chatRooms}))\n          }\n\n    createChannelWebsocketConnection(channelId) {\n        socket = new WebSocket('ws://localhost:3000/cable');\n\n        socket.onopen = function(event) {\n            console.log('WebSocket is connected.');\n            const msg = {\n                command: 'subscribe',\n                identifier: JSON.stringify({\n                    id: channelId,\n                    channel: 'ChannelChannel'\n                }),\n            };\n            socket.send(JSON.stringify(msg));\n        };\n\n        socket.onclose = function(event) {\n             console.log('WebSocket is closed.');\n        };\n\n        socket.onmessage = function(event) {            \n            const response = event.data;\n            const msg = JSON.parse(response);\n                if (msg.type === \"ping\") { return; }\n            console.log(\"FROM RAILS: \", msg);\n                if (msg.message) { renderMessage(msg.message) }  \n        };\n\n        socket.onerror = function(error) {\n            console.log('WebSocket Error: ' + error.message);\n        };\n    }\n\n    newMessage = event => {\n        event.preventDefault();\n        fetch(`http://localhost:3000/messages`,{\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            },\n            body: JSON.stringify({\n                content: event.target[0].value,\n                chat_room_id: event.target.dataset.chatRoomId\n            })\n        })\n        // .then(response => response.json())\n        // .then(messageObject => {renderMessage(messageObject)})\n        newMessageForm.reset();\n    }\n\n    render(){\n        console.log(this.state)\n        return(\n            <View style={styles.container}>\n                <View style={styles.roomContainer}>\n                    <Text>Start Chat</Text>\n                    <TextInput style={styles.roomContainer} placeholder=\"Room Name\" />\n                    <Button title=\"submit\" onPress={() => {this.createChannelWebsocketConnection()}} />\n                </View>\n                <View style={styles.roomContainer}>\n                    <Text>All Rooms</Text>\n                    <View>\n                        \n                    </View>\n                </View>\n                <View style={styles.roomContainer}>\n                    <Text>New Message</Text>\n                    <TextInput style={styles.roomContainer} placeholder=\"message...\" />\n                    <Button title=\"submit\" onPress={() => {this.newMessage()}} />\n                </View>\n            </View>\n        )\n    }\n}\n\nconst styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      backgroundColor: '#fff',\n      alignItems: 'center',\n      paddingTop: 50\n    },\n    roomContainer: {\n        paddingBottom: 25,\n        textAlign: \"center\"\n    },\n    inputDiv: {\n        height: 20\n    }\n});"]},"metadata":{},"sourceType":"module"}